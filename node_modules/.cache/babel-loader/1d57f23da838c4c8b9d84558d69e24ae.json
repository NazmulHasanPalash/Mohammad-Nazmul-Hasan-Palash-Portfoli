{"ast":null,"code":"import { getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\n\nfunction updateRoll(particle, delta) {\n  const roll = particle.options.roll;\n\n  if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n    return;\n  }\n\n  const speed = particle.roll.speed * delta.factor,\n        max = 2 * Math.PI;\n  particle.roll.angle += speed;\n\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\n\nexport class RollUpdater {\n  init(particle) {\n    const rollOpt = particle.options.roll;\n\n    if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n      particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: Math.random() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360\n      };\n\n      if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n      } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n          type: alterType,\n          value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n        };\n      } else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n          type: \"darken\",\n          value: getRangeValue(rollOpt.darken.value)\n        };\n      } else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n          type: \"enlighten\",\n          value: getRangeValue(rollOpt.enlighten.value)\n        };\n      }\n    } else {\n      particle.roll = {\n        enable: false,\n        horizontal: false,\n        vertical: false,\n        angle: 0,\n        speed: 0\n      };\n    }\n  }\n\n  isEnabled(particle) {\n    const roll = particle.options.roll;\n    return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateRoll(particle, delta);\n  }\n\n  loadOptions(options) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      if (!(source === null || source === void 0 ? void 0 : source.roll)) {\n        continue;\n      }\n\n      if (!options.roll) {\n        options.roll = new Roll();\n      }\n\n      options.roll.load(source.roll);\n    }\n  }\n\n}","map":{"version":3,"names":["getRangeValue","rangeColorToHsl","Roll","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","init","rollOpt","horizontal","mode","vertical","random","backColor","darken","enlighten","alterType","alter","type","value","isEnabled","destroyed","spawning","update","loadOptions","sources","source","load"],"sources":["/Users/palash/web development/portfolio/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"sourcesContent":["import { getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: Math.random() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.roll)) {\n                continue;\n            }\n            if (!options.roll) {\n                options.roll = new Roll();\n            }\n            options.roll.load(source.roll);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}